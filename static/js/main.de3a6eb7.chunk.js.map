{"version":3,"sources":["utils/drawRandomElement.ts","entity/Problem/exsanguination.ts","entity/Problem/trauma.ts","entity/Problem/airwayObstruction.ts","entity/Problem/discomfort.ts","entity/Problem/wound.ts","entity/Problem/burn.ts","entity/Problem/lossOfConsciousness.ts","entity/Problem/heartAttack.ts","entity/Problem/drowning.ts","interactor/drawNewProblem.ts","view/App.tsx","serviceWorker.js","index.js"],"names":["drawRandomElement","array","Math","floor","random","length","Exsanguination","params","getWorsening","drawExternal","type","location","drawMemberCut","drawInternal","this","draw","NAME","Trauma","drawHematoma","drawFracture","drawSprain","AirwayObstruction","drawPartial","due_to","drawLocation","drawWhole","Discomfort","Wound","localisation","drawLocalisation","mean","drawMean","with","drawWith","Burn","BURN_TYPES_WITH_LOCALISATION","randomBurnType","includes","undefined","LossOfConsciousness","team","drawTeam","HeartAttack","person","drawPerson","Drowning","App","useState","problem","setProblem","useEffect","getParams","className","getName","Object","keys","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de3a6eb7.chunk.js","sourcesContent":["export const drawRandomElement = <T>(array: Array<T>): T =>\n  array[Math.floor(Math.random() * array.length)];\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class Exsanguination implements Problem {\n  static NAME = \"Hémorragie\";\n\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return Exsanguination.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw() {\n    drawRandomElement([\n      this.drawExternal,\n      this.drawInternal,\n      this.drawMemberCut,\n    ])();\n  }\n\n  drawExternal = () => {\n    this.params = {\n      type: \"externe\",\n      location: drawRandomElement([\"bras\", \"jambe\", \"aisselle\"]),\n    };\n  };\n\n  drawMemberCut = () => {\n    this.params = {\n      type: \"section de membre\",\n      location: drawRandomElement([\"doigt\", \"bras\", \"jambe\"]),\n    };\n  };\n\n  drawInternal = () => {\n    this.params = {\n      type: \"interne externalisée \",\n      location: drawRandomElement([\n        \"nez\",\n        \"bouche\",\n        \"oreille\",\n        \"vagin\",\n        \"anus\",\n      ]),\n    };\n  };\n}\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class Trauma implements Problem {\n  static NAME = \"Trauma\";\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return Trauma.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw() {\n    drawRandomElement([\n      this.drawHematoma,\n      this.drawFracture,\n      this.drawSprain,\n    ])();\n  }\n\n  drawHematoma = () => {\n    this.params = {\n      type: \"hématome\",\n      location: drawRandomElement([\"bras\", \"jambe\", \"avant-bras\"]),\n    };\n  };\n  drawFracture = () => {\n    this.params = {\n      type: \"fracture\",\n      location: drawRandomElement([\"bras\", \"jambe\", \"avant-bras\", \"rachis\"]),\n    };\n  };\n  drawSprain = () => {\n    this.params = {\n      type: \"entorse\",\n      location: drawRandomElement([\"poignet\", \"cheville\", \"épaule\"]),\n    };\n  };\n}\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class AirwayObstruction implements Problem {\n  static NAME = \"Obstruction des voies aériennes\";\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return AirwayObstruction.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw() {\n    drawRandomElement([this.drawPartial, this.drawWhole])();\n  }\n\n  drawPartial = () => {\n    this.params = {\n      type: \"partiel\",\n      due_to: this.drawLocation(),\n    };\n  };\n\n  drawWhole = () => {\n    this.params = {\n      type: \"totale\",\n      due_to: this.drawLocation(),\n    };\n  };\n\n  drawLocation = () => drawRandomElement([\"corps étranger\", \"œdème\"]);\n}\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class Discomfort implements Problem {\n  static NAME = \"Malaise\";\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return Discomfort.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw() {\n    this.params = {\n      type: drawRandomElement([\n        \"AVC\",\n        \"choc anaphylactique\",\n        \"détresse respiratoire\",\n        \"hypoglycémie\",\n        \"autre\",\n      ]),\n    };\n  }\n}\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class Wound implements Problem {\n  static NAME = \"Plaie\";\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return Wound.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw = () => {\n    this.params = {\n      localisation: this.drawLocalisation(),\n      mean: this.drawMean(),\n      with: this.drawWith(),\n    };\n  };\n\n  drawLocalisation = () =>\n    drawRandomElement([\"bras\", \"jambe\", \"thorax\", \"abdomen\", \"tête\"]);\n\n  drawMean = () =>\n    drawRandomElement([\"couteau\", \"tournevis\", \"morsure de chien\"]);\n\n  drawWith = () =>\n    drawRandomElement([\n      \"avec un gros objet\",\n      \"avec un petit objet\",\n      \"avec rien\",\n    ]);\n}\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class Burn implements Problem {\n  static NAME = \"Brûlure\";\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return Burn.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw = () => {\n    const BURN_TYPES_WITH_LOCALISATION = [\n      \"chimique\",\n      \"thermique\",\n      \"radiation\",\n      \"électrique\",\n    ];\n    const BURN_TYPES_WITHOUT_LOCALISATION = [\"par ingestion\", \"par inhalation\"];\n    const randomBurnType = drawRandomElement([\n      ...BURN_TYPES_WITH_LOCALISATION,\n      ...BURN_TYPES_WITHOUT_LOCALISATION,\n    ]);\n    this.params = {\n      localisation: BURN_TYPES_WITH_LOCALISATION.includes(randomBurnType)\n        ? this.drawLocalisation()\n        : undefined,\n      type: randomBurnType,\n    };\n  };\n\n  drawLocalisation = () =>\n    drawRandomElement([\"jambe\", \"bras\", \"visage\", \"thorax\", \"abdomen\"]);\n}\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class LossOfConsciousness implements Problem {\n  static NAME = \"Perte de conscience\";\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return LossOfConsciousness.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw = () => {\n    this.params = {\n      team: this.drawTeam(),\n    };\n  };\n\n  drawTeam = () => drawRandomElement([\"en équipe\", \"sauveteur isolé\"]);\n}\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class HeartAttack implements Problem {\n  static NAME = \"Arrêt cardiaque\";\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return HeartAttack.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw = () => {\n    this.params = {\n      person: this.drawPerson(),\n      team: this.drawTeam(),\n    };\n  };\n\n  drawPerson = () => drawRandomElement([\"adulte\", \"enfant\", \"nourrisson\"]);\n\n  drawTeam = () => drawRandomElement([\"en équipe\", \"sauveteur isolé\"]);\n}\n","import { drawRandomElement } from \"../../utils/drawRandomElement\";\nimport { Problem } from \"../problem\";\n\nexport class Drowning implements Problem {\n  static NAME = \"Noyade\";\n  params = {};\n\n  constructor() {\n    this.draw();\n  }\n\n  getName() {\n    return Drowning.NAME;\n  }\n\n  getParams() {\n    return this.params;\n  }\n\n  getWorsening = () => null;\n\n  draw = () => {\n    this.params = {\n      person: this.drawPerson(),\n      team: this.drawTeam(),\n    };\n  };\n\n  drawPerson = () => drawRandomElement([\"adulte\", \"enfant\", \"nourrisson\"]);\n\n  drawTeam = () => drawRandomElement([\"en équipe\", \"sauveteur isolé\"]);\n}\n","import { Problem } from \"../entity/problem\";\nimport { drawRandomElement } from \"../utils/drawRandomElement\";\nimport { Exsanguination } from \"../entity/Problem/exsanguination\";\nimport { Trauma } from \"../entity/Problem/trauma\";\nimport { AirwayObstruction } from \"../entity/Problem/airwayObstruction\";\nimport { Discomfort } from \"../entity/Problem/discomfort\";\nimport { Wound } from \"../entity/Problem/wound\";\nimport { Burn } from \"../entity/Problem/burn\";\nimport { LossOfConsciousness } from \"../entity/Problem/lossOfConsciousness\";\nimport { HeartAttack } from \"../entity/Problem/heartAttack\";\nimport { Drowning } from \"../entity/Problem/drowning\";\n\nexport const drawNewProblemInteractor = (): Problem => {\n  const problemType = drawRandomElement([\n    Exsanguination,\n    Trauma,\n    AirwayObstruction,\n    Discomfort,\n    Wound,\n    Burn,\n    LossOfConsciousness,\n    HeartAttack,\n    Drowning,\n  ]);\n  return new problemType();\n};\n","import React, { useEffect, useState } from \"react\";\nimport { drawNewProblemInteractor } from \"../interactor/drawNewProblem\";\nimport \"./App.css\";\nimport { Problem } from \"../entity/problem\";\n\nconst App = () => {\n  const [problem, setProblem] = useState<Problem | null>();\n\n  useEffect(() => {\n    setProblem(drawNewProblemInteractor());\n  }, []);\n\n  const params = problem && problem.getParams();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>{problem && problem.getName()}</h1>\n        <h2>Params</h2>\n        {params &&\n          Object.keys(params).map((key) => {\n            return (\n              <span key={key}>\n                {key} : {params[key]}\n              </span>\n            );\n          })}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./view/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}